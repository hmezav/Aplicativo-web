"AACCTA", "AACCTC", "AACCTG", "AACCTT",
"AACGAA", "AACGAC", "AACGAG", "AACGAT")
# Inicializar un vector de ceros para almacenar el recuento de cada hexámero
counts <- rep(0, length(hexamers))
# Recorrer la secuencia y contar los hexámeros
for (i in 1:(nchar(sequence) - 5)) {
hexamer <- substr(sequence, i, i + 5)
if (hexamer %in% hexamers) {
index <- match(hexamer, hexamers)
counts[index] <- counts[index] + 1
}
}
# Devolver el vector de recuento de hexámeros
return(counts)
}
# Ejemplo de uso
secuencia_ejemplo <- "ATGCATGCAAAAACGTAACG"
recuento_hexameros <- count_hexamers(secuencia_ejemplo)
print(recuento_hexameros)
---
title: "<br> <br> <br> Modelos lineales. <br> Ejercicios de la unidad 2"
install.packages("Rcmdr")
install.packages("MASS")
knitr::opts_chunk$set(echo = TRUE)
# Función para contar hexámeros en una secuencia de ADN
count_hexamers <- function(sequence) {
# Inicializar un vector con ceros para cada hexámero posible
hexamers <- c("AAAAAA", "AAAAAC", "AAAAAG", "AAAAAT",
"AAAACA", "AAAACC", "AAAACG", "AAAACT",
"AAAAGA", "AAAAGC", "AAAAGG", "AAAAGT",
"AAAATA", "AAAATC", "AAAATG", "AAAATT",
"AAACAA", "AAACAC", "AAACAG", "AAACAT",
"AAACCA", "AAACCC", "AAACCG", "AAACCT",
"AAACGA", "AAACGC", "AAACGG", "AAACGT",
"AAACTA", "AAACTC", "AAACTG", "AAACTT",
"AAAGAA", "AAAGAC", "AAAGAG", "AAAGAT",
"AAAGCA", "AAAGCC", "AAAGCG", "AAAGCT",
"AAAGGA", "AAAGGC", "AAAGGG", "AAAGGT",
"AAAGTA", "AAAGTC", "AAAGTG", "AAAGTT",
"AAATAA", "AAATAC", "AAATAG", "AAATAT",
"AAATCA", "AAATCC", "AAATCG", "AAATCT",
"AAATGA", "AAATGC", "AAATGG", "AAATGT",
"AAATTA", "AAATTC", "AAATTG", "AAATTT",
"AACAAA", "AACAAC", "AACAAG", "AACAAT",
"AACACA", "AACACC", "AACACG", "AACACT",
"AACAGA", "AACAGC", "AACAGG", "AACAGT",
"AACATA", "AACATC", "AACATG", "AACATT",
"AACCAA", "AACCAC", "AACCAG", "AACCAT",
"AACCCA", "AACCCC", "AACCCG", "AACCCT",
"AACCGA", "AACCGC", "AACCGG", "AACCGT",
"AACCTA", "AACCTC", "AACCTG", "AACCTT",
"AACGAA", "AACGAC", "AACGAG", "AACGAT")
# Inicializar un vector de ceros para almacenar el recuento de cada hexámero
counts <- rep(0, length(hexamers))
# Recorrer la secuencia y contar los hexámeros
for (i in 1:(nchar(sequence) - 5)) {
hexamer <- substr(sequence, i, i + 5)
if (hexamer %in% hexamers) {
index <- match(hexamer, hexamers)
counts[index] <- counts[index] + 1
}
}
# Devolver el vector de recuento de hexámeros
return(counts)
}
# Ejemplo de uso
secuencia_ejemplo <- "ATGCATGCAAAAACGTAACG"
recuento_hexameros <- count_hexamers(secuencia_ejemplo)
print(recuento_hexameros)
knitr::opts_chunk$set(echo = TRUE)
# Función para contar hexámeros en una secuencia de ADN
count_hexamers <- function(sequence) {
# Inicializar un vector con ceros para cada hexámero posible
hexamers <- c("AAAAAA", "AAAAAC", "AAAAAG", "AAAAAT",
"AAAACA", "AAAACC", "AAAACG", "AAAACT",
"AAAAGA", "AAAAGC", "AAAAGG", "AAAAGT",
"AAAATA", "AAAATC", "AAAATG", "AAAATT",
"AAACAA", "AAACAC", "AAACAG", "AAACAT",
"AAACCA", "AAACCC", "AAACCG", "AAACCT",
"AAACGA", "AAACGC", "AAACGG", "AAACGT",
"AAACTA", "AAACTC", "AAACTG", "AAACTT",
"AAAGAA", "AAAGAC", "AAAGAG", "AAAGAT",
"AAAGCA", "AAAGCC", "AAAGCG", "AAAGCT",
"AAAGGA", "AAAGGC", "AAAGGG", "AAAGGT",
"AAAGTA", "AAAGTC", "AAAGTG", "AAAGTT",
"AAATAA", "AAATAC", "AAATAG", "AAATAT",
"AAATCA", "AAATCC", "AAATCG", "AAATCT",
"AAATGA", "AAATGC", "AAATGG", "AAATGT",
"AAATTA", "AAATTC", "AAATTG", "AAATTT",
"AACAAA", "AACAAC", "AACAAG", "AACAAT",
"AACACA", "AACACC", "AACACG", "AACACT",
"AACAGA", "AACAGC", "AACAGG", "AACAGT",
"AACATA", "AACATC", "AACATG", "AACATT",
"AACCAA", "AACCAC", "AACCAG", "AACCAT",
"AACCCA", "AACCCC", "AACCCG", "AACCCT",
"AACCGA", "AACCGC", "AACCGG", "AACCGT",
"AACCTA", "AACCTC", "AACCTG", "AACCTT",
"AACGAA", "AACGAC", "AACGAG", "AACGAT")
# Inicializar un vector de ceros para almacenar el recuento de cada hexámero
counts <- rep(0, length(hexamers))
# Recorrer la secuencia y contar los hexámeros
for (i in 1:(nchar(sequence) - 5)) {
hexamer <- substr(sequence, i, i + 5)
if (hexamer %in% hexamers) {
index <- match(hexamer, hexamers)
counts[index] <- counts[index] + 1
}
}
# Devolver el vector de recuento de hexámeros
return(counts)
}
# Ejemplo de uso
secuencia_ejemplo <- "ATGCATGCAAAAACGTAACG"
recuento_hexameros <- count_hexamers(secuencia_ejemplo)
print(recuento_hexameros)
knitr::opts_chunk$set(echo = TRUE)
# Función para contar hexámeros en una secuencia de ADN
count_hexamers <- function(sequence) {
# Inicializar un vector con ceros para cada hexámero posible
hexamers <- c("AAAAAA", "AAAAAC", "AAAAAG", "AAAAAT",
"AAAACA", "AAAACC", "AAAACG", "AAAACT",
"AAAAGA", "AAAAGC", "AAAAGG", "AAAAGT",
"AAAATA", "AAAATC", "AAAATG", "AAAATT",
"AAACAA", "AAACAC", "AAACAG", "AAACAT",
"AAACCA", "AAACCC", "AAACCG", "AAACCT",
"AAACGA", "AAACGC", "AAACGG", "AAACGT",
"AAACTA", "AAACTC", "AAACTG", "AAACTT",
"AAAGAA", "AAAGAC", "AAAGAG", "AAAGAT",
"AAAGCA", "AAAGCC", "AAAGCG", "AAAGCT",
"AAAGGA", "AAAGGC", "AAAGGG", "AAAGGT",
"AAAGTA", "AAAGTC", "AAAGTG", "AAAGTT",
"AAATAA", "AAATAC", "AAATAG", "AAATAT",
"AAATCA", "AAATCC", "AAATCG", "AAATCT",
"AAATGA", "AAATGC", "AAATGG", "AAATGT",
"AAATTA", "AAATTC", "AAATTG", "AAATTT",
"AACAAA", "AACAAC", "AACAAG", "AACAAT",
"AACACA", "AACACC", "AACACG", "AACACT",
"AACAGA", "AACAGC", "AACAGG", "AACAGT",
"AACATA", "AACATC", "AACATG", "AACATT",
"AACCAA", "AACCAC", "AACCAG", "AACCAT",
"AACCCA", "AACCCC", "AACCCG", "AACCCT",
"AACCGA", "AACCGC", "AACCGG", "AACCGT",
"AACCTA", "AACCTC", "AACCTG", "AACCTT",
"AACGAA", "AACGAC", "AACGAG", "AACGAT")
# Inicializar un vector de ceros para almacenar el recuento de cada hexámero
counts <- rep(0, length(hexamers))
# Recorrer la secuencia y contar los hexámeros
for (i in 1:(nchar(sequence) - 5)) {
hexamer <- substr(sequence, i, i + 5)
if (hexamer %in% hexamers) {
index <- match(hexamer, hexamers)
counts[index] <- counts[index] + 1
}
}
# Devolver el vector de recuento de hexámeros
return(counts)
}
# Ejemplo de uso
secuencia_ejemplo <- "ATGCATGCAAAAACGTAACG"
recuento_hexameros <- count_hexamers(secuencia_ejemplo)
print(recuento_hexameros)
knitr::opts_chunk$set(echo = TRUE)
# Función para contar hexámeros en una secuencia de ADN
count_hexamers <- function(sequence) {
# Inicializar un vector con ceros para cada hexámero posible
hexamers <- c("AAAAAA", "AAAAAC", "AAAAAG", "AAAAAT",
"AAAACA", "AAAACC", "AAAACG", "AAAACT",
"AAAAGA", "AAAAGC", "AAAAGG", "AAAAGT",
"AAAATA", "AAAATC", "AAAATG", "AAAATT",
"AAACAA", "AAACAC", "AAACAG", "AAACAT",
"AAACCA", "AAACCC", "AAACCG", "AAACCT",
"AAACGA", "AAACGC", "AAACGG", "AAACGT",
"AAACTA", "AAACTC", "AAACTG", "AAACTT",
"AAAGAA", "AAAGAC", "AAAGAG", "AAAGAT",
"AAAGCA", "AAAGCC", "AAAGCG", "AAAGCT",
"AAAGGA", "AAAGGC", "AAAGGG", "AAAGGT",
"AAAGTA", "AAAGTC", "AAAGTG", "AAAGTT",
"AAATAA", "AAATAC", "AAATAG", "AAATAT",
"AAATCA", "AAATCC", "AAATCG", "AAATCT",
"AAATGA", "AAATGC", "AAATGG", "AAATGT",
"AAATTA", "AAATTC", "AAATTG", "AAATTT",
"AACAAA", "AACAAC", "AACAAG", "AACAAT",
"AACACA", "AACACC", "AACACG", "AACACT",
"AACAGA", "AACAGC", "AACAGG", "AACAGT",
"AACATA", "AACATC", "AACATG", "AACATT",
"AACCAA", "AACCAC", "AACCAG", "AACCAT",
"AACCCA", "AACCCC", "AACCCG", "AACCCT",
"AACCGA", "AACCGC", "AACCGG", "AACCGT",
"AACCTA", "AACCTC", "AACCTG", "AACCTT",
"AACGAA", "AACGAC", "AACGAG", "AACGAT")
# Inicializar un vector de ceros para almacenar el recuento de cada hexámero
counts <- rep(0, length(hexamers))
# Recorrer la secuencia y contar los hexámeros
for (i in 1:(nchar(sequence) - 5)) {
hexamer <- substr(sequence, i, i + 5)
if (hexamer %in% hexamers) {
index <- match(hexamer, hexamers)
counts[index] <- counts[index] + 1
}
}
# Devolver el vector de recuento de hexámeros
return(counts)
}
# Ejemplo de uso
secuencia_ejemplo <- "ATGCATGCAAAAACGTAACG"
recuento_hexameros <- count_hexamers(secuencia_ejemplo)
print(recuento_hexameros)
# Paso 1: Leer los datos del archivo human_data.txt
data <- read.table("human_data.txt", header = FALSE)
# Paso 2: Separar las características (X) y las etiquetas de clase (y)
X <- data[, 1:4096]  # Las primeras 4096 columnas son las características (hexámeros)
knitr::opts_chunk$set(echo = TRUE)
# Función para contar hexámeros en una secuencia de ADN
count_hexamers <- function(sequence) {
# Inicializar un vector con ceros para cada hexámero posible
hexamers <- c("AAAAAA", "AAAAAC", "AAAAAG", "AAAAAT",
"AAAACA", "AAAACC", "AAAACG", "AAAACT",
"AAAAGA", "AAAAGC", "AAAAGG", "AAAAGT",
"AAAATA", "AAAATC", "AAAATG", "AAAATT",
"AAACAA", "AAACAC", "AAACAG", "AAACAT",
"AAACCA", "AAACCC", "AAACCG", "AAACCT",
"AAACGA", "AAACGC", "AAACGG", "AAACGT",
"AAACTA", "AAACTC", "AAACTG", "AAACTT",
"AAAGAA", "AAAGAC", "AAAGAG", "AAAGAT",
"AAAGCA", "AAAGCC", "AAAGCG", "AAAGCT",
"AAAGGA", "AAAGGC", "AAAGGG", "AAAGGT",
"AAAGTA", "AAAGTC", "AAAGTG", "AAAGTT",
"AAATAA", "AAATAC", "AAATAG", "AAATAT",
"AAATCA", "AAATCC", "AAATCG", "AAATCT",
"AAATGA", "AAATGC", "AAATGG", "AAATGT",
"AAATTA", "AAATTC", "AAATTG", "AAATTT",
"AACAAA", "AACAAC", "AACAAG", "AACAAT",
"AACACA", "AACACC", "AACACG", "AACACT",
"AACAGA", "AACAGC", "AACAGG", "AACAGT",
"AACATA", "AACATC", "AACATG", "AACATT",
"AACCAA", "AACCAC", "AACCAG", "AACCAT",
"AACCCA", "AACCCC", "AACCCG", "AACCCT",
"AACCGA", "AACCGC", "AACCGG", "AACCGT",
"AACCTA", "AACCTC", "AACCTG", "AACCTT",
"AACGAA", "AACGAC", "AACGAG", "AACGAT")
# Inicializar un vector de ceros para almacenar el recuento de cada hexámero
counts <- rep(0, length(hexamers))
# Recorrer la secuencia y contar los hexámeros
for (i in 1:(nchar(sequence) - 5)) {
hexamer <- substr(sequence, i, i + 5)
if (hexamer %in% hexamers) {
index <- match(hexamer, hexamers)
counts[index] <- counts[index] + 1
}
}
# Devolver el vector de recuento de hexámeros
return(counts)
}
# Ejemplo de uso
secuencia_ejemplo <- "ATGCATGCAAAAACGTAACG"
recuento_hexameros <- count_hexamers(secuencia_ejemplo)
print(recuento_hexameros)
# Paso 1: Leer los datos del archivo human_data.txt
data <- read.table("human_data.txt", header = FALSE)
# Paso 2: Separar las características (X) y las etiquetas de clase (y)
X <- data[, 1:4096]  # Las primeras 4096 columnas son las características (hexámeros)
knitr::opts_chunk$set(echo = TRUE)
# Función para contar hexámeros en una secuencia de ADN
count_hexamers <- function(sequence) {
# Inicializar un vector con ceros para cada hexámero posible
hexamers <- c("AAAAAA", "AAAAAC", "AAAAAG", "AAAAAT",
"AAAACA", "AAAACC", "AAAACG", "AAAACT",
"AAAAGA", "AAAAGC", "AAAAGG", "AAAAGT",
"AAAATA", "AAAATC", "AAAATG", "AAAATT",
"AAACAA", "AAACAC", "AAACAG", "AAACAT",
"AAACCA", "AAACCC", "AAACCG", "AAACCT",
"AAACGA", "AAACGC", "AAACGG", "AAACGT",
"AAACTA", "AAACTC", "AAACTG", "AAACTT",
"AAAGAA", "AAAGAC", "AAAGAG", "AAAGAT",
"AAAGCA", "AAAGCC", "AAAGCG", "AAAGCT",
"AAAGGA", "AAAGGC", "AAAGGG", "AAAGGT",
"AAAGTA", "AAAGTC", "AAAGTG", "AAAGTT",
"AAATAA", "AAATAC", "AAATAG", "AAATAT",
"AAATCA", "AAATCC", "AAATCG", "AAATCT",
"AAATGA", "AAATGC", "AAATGG", "AAATGT",
"AAATTA", "AAATTC", "AAATTG", "AAATTT",
"AACAAA", "AACAAC", "AACAAG", "AACAAT",
"AACACA", "AACACC", "AACACG", "AACACT",
"AACAGA", "AACAGC", "AACAGG", "AACAGT",
"AACATA", "AACATC", "AACATG", "AACATT",
"AACCAA", "AACCAC", "AACCAG", "AACCAT",
"AACCCA", "AACCCC", "AACCCG", "AACCCT",
"AACCGA", "AACCGC", "AACCGG", "AACCGT",
"AACCTA", "AACCTC", "AACCTG", "AACCTT",
"AACGAA", "AACGAC", "AACGAG", "AACGAT")
# Inicializar un vector de ceros para almacenar el recuento de cada hexámero
counts <- rep(0, length(hexamers))
# Recorrer la secuencia y contar los hexámeros
for (i in 1:(nchar(sequence) - 5)) {
hexamer <- substr(sequence, i, i + 5)
if (hexamer %in% hexamers) {
index <- match(hexamer, hexamers)
counts[index] <- counts[index] + 1
}
}
# Devolver el vector de recuento de hexámeros
return(counts)
}
# Ejemplo de uso
secuencia_ejemplo <- "ATGCATGCAAAAACGTAACG"
recuento_hexameros <- count_hexamers(secuencia_ejemplo)
print(recuento_hexameros)
# Paso 1: Leer los datos del archivo human_data.txt
data <- read.table("human_data.txt", header = TRUE)
# Paso 2: Separar las características (X) y las etiquetas de clase (y)
X <- data[, 1:4096]  # Las primeras 4096 columnas son las características (hexámeros)
knitr::opts_chunk$set(echo = TRUE)
##vectores
num =c(2, 3, 5, 7, 8)
##crear un vector numerico
car =c("aa", "bb", "cc")
## crear un vector de tipo cadena de caracteres
## combinar vectores
c(num, car)
##vectores
num =c(2, 3, 5, 7, 8)
##crear un vector numerico
car =c("aa", "bb", "cc")
## crear un vector de tipo cadena de caracteres
## combinar vectores
c(num, car)
tinytex::install_tinytex()
human_data <- read.csv("C:/Users/Maestría/Desktop/human_data.txt", sep="")
library(readr)
human_data <- read_csv("C:/Users/Maestría/Desktop/human_data.txt")
knitr::opts_chunk$set(echo = TRUE, comment = NULL)
require(knitr)
require(class)
require(gmodels)
knitr::opts_chunk$set(echo = TRUE, comment = NULL)
require(knitr)
require(class)
require(gmodels)
library(ShortRead)
install.packages("shortRead")
knitr::opts_chunk$set(echo = TRUE, comment = NULL)
require(knitr)
require(class)
require(gmodels)
require(knitr)
require(class)
require(gmodels)
library(ShortRead)
install.packages("ShortRead")
library(ShortRead)
install.packages("ShortRead")
install.packages("ggplot2")
install.packages("ShortRead")
install.packages("Rtools")
install.packages("ShortRead")
install.packages("ShortRead")
library(ggplot2)
#Vamos a crear objetos para leer el archivo de lecturas fastq
dir_fastq = file.path("C:/Users/FernandoG/Documents/MasterBioinformatica,
/AnalisisDatosOmicos/PEC/PEC1")
nom_fastq <- dir(dir_fastq, full=TRUE)
nom_fastq[5]
fq_file = readFastq('S02_Bac02_read1.fastq')
#Vamos a crear objetos para leer el archivo de lecturas fastq
dir_fastq = file.path("C:/Users/FernandoG/Documents/MasterBioinformatica,
/AnalisisDatosOmicos/PEC/PEC1")
nom_fastq <- dir(dir_fastq, full=TRUE)
nom_fastq[5]
fq_file = readFastq('S08_Ves02_read2.fastq')
#Vamos a crear objetos para leer el archivo de lecturas fastq
dir_fastq = file.path("C:\Users\Maestría\Downloads\S08_Ves02_read2.fastq")
#Vamos a crear objetos para leer el archivo de lecturas fastq
dir_fastq = file.path("C:\Users\Maestría\Downloads\S08_Ves02_read2.fastq")
install.packages("BiocManager")
BiocManager::install("Rqc")
install.packages("C:/rtools42/unins000.exe", repos = NULL)
install.packages("ShortRead")
install.packages("ShortRead")
install.packages("Rcmdr", dependencies = TRUE)
install.packages("Rcmdr", dependencies = TRUE)
library(ShortRead)
install.packages("ShortRead", dependencies = TRUE)
install.packages("ShortRead")
install.packages("ShortRead")
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = FALSE)
setwd(""C:\Users\Maestría\Downloads\S08_Ves02_read2.fastq"")
setwd(C:\Users\Maestría\Downloads\S08_Ves02_read2.fastq")
setwd("C:\Users\Maestría\Downloads\S08_Ves02_read2.fastq")
setwd('C:\Users\Maestría\Downloads\S08_Ves02_read2.fastq')
setwd('C:\Users\Maestría\Downloads\S08_Ves02_read2.fastq')
setwd("'C:\Users\Maestría\Downloads\S08_Ves02_read2.fastq'")
setwd("'C:\Users\Maestría\Downloads\S08_Ves02_read2.fastq'")
setwd("'C:\Users\Maestría\Downloads\S08_Ves02_read2.fastq'")
setwd("'C:\Users\Maestría\Downloads\S08_Ves02_read2.fastq'")
setwd('C:\Users\Maestría\Downloads\S08_Ves02_read2.fastq'")
setwd('C:\Users\Maestría\Downloads\S08_Ves02_read2.fastq'
setwd('C:\Users\Maestría\Downloads\S08_Ves02_read2.fastq')
setwd('C:\Users\Maestría\Downloads\S08_Ves02_read2.fastq')
install.packages("MASS")
install.packages("Rcmdr")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("Bioconductor")
library(Bioconductor)
install.packages("bioconductor")
require(knitr)
require(class)
require(gmodels)
knitr::opts_chunk$set(echo = TRUE, comment = NULL)
library(ShortRead)
###library(ShortRead)
library(ggplot2)
#Vamos a crear objetos para leer el archivo de lecturas fastq
dir_fastq = file.path("C:/Users/FernandoG/Documents/MasterBioinformatica,
/AnalisisDatosOmicos/PEC/PEC1")
nom_fastq <- dir(dir_fastq, full=TRUE)
nom_fastq[5]
fq_file = readFastq('S02_Bac02_read1.fastq')
#Vamos a crear objetos para leer el archivo de lecturas fastq
dir_fastq = file.path("C:\Users\Maestría\Downloads\S08_Ves02_read2.fastq")
#Vamos a crear objetos para leer el archivo de lecturas fastq
dir_fastq = file.path("C:\Users\Maestría\Downloads\S08_Ves02_read2.fastq")
#Vamos a crear objetos para leer el archivo de lecturas fastq
dir_fastq = file.path("C:\Users\Maestría\Downloads\S08_Ves02_read2.fastq")
#Vamos a crear objetos para leer el archivo de lecturas fastq
dir_fastq = file.path("C:/Users/FernandoG/Documents/MasterBioinformatica,
/AnalisisDatosOmicos/PEC/PEC1")
"C:\Users\Maestría\Downloads\S08_Ves02_read2.fastq"
#Vamos a crear objetos para leer el archivo de lecturas fastq
dir_fastq = file.path("C:/Users/FernandoG/Documents/MasterBioinformatica,
/AnalisisDatosOmicos/PEC/PEC1")
nom_fastq <- dir(dir_fastq, full=TRUE)
nom_fastq[5]
fq_file = readFastq('S02_Bac02_read1.fastq')
#Vamos a crear objetos para leer el archivo de lecturas fastq
dir_fastq = file.path("C:/Users/FernandoG/Documents/MasterBioinformatica,
/AnalisisDatosOmicos/PEC/PEC1")
nom_fastq <- dir(dir_fastq, full=TRUE)
nom_fastq[5]
fq_file = readFastq('S08_Ves02_read2.fastq')
install.packages("readFastq")
library(ShortRead)
install.packages("ShortRead")
install.packages("Rcmdr", dependencies = TRUE)
install.packages("ShortRead", dependencies = TRUE)
av <- disponibles.paquetes(filtros=lista())
av <- disponibles.ShortRead(filtros=lista())
source("http://www.bioconductor.org/getBioC.R")
source("http://www.bioconductor.org/getBioC.R")
> source("http://www.bioconductor.org/getBioC.R")
source("http://www.bioconductor.org/getBioC.R")
if(!(require("ape")))
install.packages(c("ape"),repo="http://cran.r-project.org",dep=TRUE)
require(ape)
if(!(require("ape")))
install.packages(c("ape"),repo="http://cran.r-project.org",dep=TRUE)
require(ape)
if (!require("BiocManager", quietly = TRUE)) install.packages("BiocManager")
BiocManager::install("Rqc")
install.packages("xfun")
remove.packages("xfun")
install.packages("xfun")
install.packages("xfun")
install.packages("TinyTeX")
install.packages("TinyTeX")
## Global options
library(knitr)
library(rmdformats)
options(max.print="75")
opts_chunk$set(echo=TRUE,
cache=FALSE,
prompt=FALSE,
tidy=TRUE,
comment=NA,
message=FALSE,
warning=FALSE)
opts_knit$set(width=75)
### instalamos las librerias necesarias
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install(c("pd.hg.u133.plus.2", "hgu133plus2.db",
"oligo", "limma", "Biobase", "arrayQualityMetrics", "genefilter", "annotate", "GOstats"))
CELfiles <- targetsDF$fileName
load("C:/Users/Maestría/Desktop/TFM/AutoinmuneExplorer/.RData")
rsconnect::setAccountInfo(name='4o8f73-h0ctor-meza0vera', token='BCC5B3742BDC0D6CD32FC9B00F492D31', secret='1q3oY3PK96jGJDoKb0bXEwGoKSxytJmXTwM+ZeS+')
rsconnect
shiny::runApp('C:/Users/Maestría/Desktop/TFM/AutoinmuneExplorer')
runApp('C:/Users/Maestría/Desktop/TFM/AutoinmuneExplorer')
remotes::install_version("pubmed.mineR", version = "1.0.19")
remove.packages("pubmed.mineR")
remotes::install_version("pubmed.mineR", version = "1.0.19")
shiny::runApp('C:/Users/Maestría/Desktop/AutoinmuneExplorer')
rsconnect::deployApp()
rsconnect::deployApp()
1
rsconnect::deployApp()
library(Matrix)
remove.packages("Matrix")
install.packages(Matrix)
install.packages('Matrix')
rsconnect::deployApp()
setwd("C:/Users/Maestría/Desktop/AutoinmuneExplorer")
rsconnect::deployApp()
rsconnect::deployApp()
rsconnect::deployApp()
remove.packages('Matrix')
shiny::runApp()
rsconnect::deployApp()
rsconnect::setAccountInfo(name='4o8f73-h0ctor-meza0vera', token='BCC5B3742BDC0D6CD32FC9B00F492D31', secret='1q3oY3PK96jGJDoKb0bXEwGoKSxytJmXTwM+ZeS+')
rsconnect::deployApp()
rsconnect::deployApp()
